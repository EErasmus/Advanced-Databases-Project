ALTER SESSION SET container = xepdb1;

SELECT
    MAX(length(name)),
    MAX(length(year_founded)),
    MAX(length(public_university))
FROM
    x_university;

-- create university table --
DROP TABLE university;

CREATE TABLE university (
    university_id      INTEGER
        GENERATED BY DEFAULT AS IDENTITY START WITH 1000,
    university_name    VARCHAR2(80 CHAR),
    year_founded       INTEGER,
    public_university  CHAR(1),
    avg_tuition        INTEGER,
    address_id         INTEGER
);

ALTER TABLE university ADD CONSTRAINT university_pk PRIMARY KEY ( university_id );

ALTER TABLE university
    ADD CONSTRAINT university_address_fk FOREIGN KEY ( address_address_id )
        REFERENCES address ( address_id );
        
-- load university table --
INSERT INTO university (
    university_name,
    year_founded,
    public_university,
    avg_tuition
)
    SELECT
        name university_name,
        year_founded,
        CASE public_university
            WHEN 'TRUE' THEN
                'X'
            ELSE
                NULL
        END,
        round(avg_tuition)
    FROM
        x_university;

SELECT
    *
FROM
    university;

-- match up universities with addresses --
DROP VIEW x_states;

CREATE VIEW x_states AS
    SELECT
        TRIM(state)            state,
        TRIM(abbreviation)     abbreviation
    FROM
        (
            SELECT
                'Alabama  '  state,
                'AL '        abbreviation
            FROM
                dual
            UNION
            SELECT
                'Alaska  ' state,
                'AK '
            FROM
                dual
            UNION
            SELECT
                'Arizona  ' state,
                'AZ '
            FROM
                dual
            UNION
            SELECT
                'Arkansas  ' state,
                'AR '
            FROM
                dual
            UNION
            SELECT
                'California  ' state,
                'CA '
            FROM
                dual
            UNION
            SELECT
                'Colorado  ' state,
                'CO '
            FROM
                dual
            UNION
            SELECT
                'Connecticut  ' state,
                'CT '
            FROM
                dual
            UNION
            SELECT
                'Delaware  ' state,
                'DE '
            FROM
                dual
            UNION
            SELECT
                'District of Columbia  ' state,
                'DC '
            FROM
                dual
            UNION
            SELECT
                'Florida  ' state,
                'FL '
            FROM
                dual
            UNION
            SELECT
                'Georgia  ' state,
                'GA '
            FROM
                dual
            UNION
            SELECT
                'Hawaii  ' state,
                'HI '
            FROM
                dual
            UNION
            SELECT
                'Idaho  ' state,
                'ID '
            FROM
                dual
            UNION
            SELECT
                'Illinois  ' state,
                'IL '
            FROM
                dual
            UNION
            SELECT
                'Indiana  ' state,
                'IN '
            FROM
                dual
            UNION
            SELECT
                'Iowa  ' state,
                'IA '
            FROM
                dual
            UNION
            SELECT
                'Kansas  ' state,
                'KS '
            FROM
                dual
            UNION
            SELECT
                'Kentucky  ' state,
                'KY '
            FROM
                dual
            UNION
            SELECT
                'Louisiana  ' state,
                'LA '
            FROM
                dual
            UNION
            SELECT
                'Maine  ' state,
                'ME '
            FROM
                dual
            UNION
            SELECT
                'Maryland  ' state,
                'MD '
            FROM
                dual
            UNION
            SELECT
                'Massachusetts  ' state,
                'MA '
            FROM
                dual
            UNION
            SELECT
                'Michigan  ' state,
                'MI '
            FROM
                dual
            UNION
            SELECT
                'Minnesota  ' state,
                'MN '
            FROM
                dual
            UNION
            SELECT
                'Mississippi  ' state,
                'MS '
            FROM
                dual
            UNION
            SELECT
                'Missouri  ' state,
                'MO '
            FROM
                dual
            UNION
            SELECT
                'Montana  ' state,
                'MT '
            FROM
                dual
            UNION
            SELECT
                'Nebraska  ' state,
                'NE '
            FROM
                dual
            UNION
            SELECT
                'Nevada  ' state,
                'NV '
            FROM
                dual
            UNION
            SELECT
                'New Hampshire  ' state,
                'NH '
            FROM
                dual
            UNION
            SELECT
                'New Jersey  ' state,
                'NJ '
            FROM
                dual
            UNION
            SELECT
                'New Mexico  ' state,
                'NM '
            FROM
                dual
            UNION
            SELECT
                'New York  ' state,
                'NY '
            FROM
                dual
            UNION
            SELECT
                'North Carolina  ' state,
                'NC '
            FROM
                dual
            UNION
            SELECT
                'North Dakota  ' state,
                'ND '
            FROM
                dual
            UNION
            SELECT
                'Ohio  ' state,
                'OH '
            FROM
                dual
            UNION
            SELECT
                'Oklahoma  ' state,
                'OK '
            FROM
                dual
            UNION
            SELECT
                'Oregon  ' state,
                'OR '
            FROM
                dual
            UNION
            SELECT
                'Pennsylvania  ' state,
                'PA '
            FROM
                dual
            UNION
            SELECT
                'Puerto Rico  ' state,
                'PR '
            FROM
                dual
            UNION
            SELECT
                'Rhode Island  ' state,
                'RI '
            FROM
                dual
            UNION
            SELECT
                'South Carolina  ' state,
                'SC '
            FROM
                dual
            UNION
            SELECT
                'South Dakota  ' state,
                'SD '
            FROM
                dual
            UNION
            SELECT
                'Tennessee  ' state,
                'TN '
            FROM
                dual
            UNION
            SELECT
                'Texas  ' state,
                'TX '
            FROM
                dual
            UNION
            SELECT
                'Utah  ' state,
                'UT '
            FROM
                dual
            UNION
            SELECT
                'Vermont  ' state,
                'VT '
            FROM
                dual
            UNION
            SELECT
                'Virginia  ' state,
                'VA '
            FROM
                dual
            UNION
            SELECT
                'Virgin Islands  ' state,
                'VI '
            FROM
                dual
            UNION
            SELECT
                'Washington  ' state,
                'WA '
            FROM
                dual
            UNION
            SELECT
                'West Virginia  ' state,
                'WV '
            FROM
                dual
            UNION
            SELECT
                'Wisconsin  ' state,
                'WI '
            FROM
                dual
            UNION
            SELECT
                'Wyoming  ' state,
                'WY '
            FROM
                dual
        );

-- remove redundant universities --
DELETE FROM university xxx
WHERE
    EXISTS (
        SELECT
            uni.university_id,
            uni.university_name,
            dups.rank_position
        FROM
                 university uni
            JOIN (
                SELECT
                    b.cnt,
                    a.university_id,
                    a.university_name,
                    RANK()
                    OVER(PARTITION BY a.university_name
                         ORDER BY a.university_id
                    ) rank_position
                FROM
                         university a
                    JOIN (
                        SELECT
                            COUNT(*) cnt,
                            university_name
                        FROM
                            university
                        GROUP BY
                            university_name
                        HAVING
                            COUNT(*) > 1
                    ) b ON ( a.university_name = b.university_name )
                ORDER BY
                    a.university_name,
                    a.university_id
            ) dups ON ( uni.university_id = dups.university_id )
        WHERE
                rank_position > 1
            AND xxx.university_id = uni.university_id
    );

COMMIT;
    

-- find universities with names in a state and city  --
COMMIT;

SELECT
    COUNT(*),
    address_id
FROM
    university
WHERE
    address_id IS NOT NULL
GROUP BY
    address_id
HAVING
    COUNT(*) > 1;

MERGE INTO university uni
USING (
          SELECT
              university_id,
              address_id
          FROM
              (
                  SELECT
                      u.university_id,
                      u.university_name,
                      u.year_founded,
                      b.city,
                      s.abbreviation,
                      b.address_id,
                      b.addr1,
                      RANK()
                      OVER(PARTITION BY u.university_id
                           ORDER BY b.address_id
                      )  address_rank,
                      RANK()
                      OVER(PARTITION BY b.address_id
                           ORDER BY u.university_id
                      )  university_rank
                  FROM
                           (
                          SELECT
                              *
                          FROM
                              university
                          WHERE
                              university.address_id IS NULL
                      ) u
                      JOIN x_states  s ON ( u.university_name LIKE '%'
                                                                  || s.state
                                                                  || '%'
                                           AND university_id < 2000 )
                      JOIN ( -- all of the city/state combinations
                                                                                                                                                                                                        SELECT
                              a.address_id,
                              a.addr1    addr1,
                              state      abbreviation,
                              city
                          FROM
                              address a
                              LEFT OUTER JOIN university ON ( university.address_id = a.address_id )
                          WHERE
                              university.university_id IS NULL
                      )         b ON ( s.abbreviation = b.abbreviation
                               AND upper(u.university_name) LIKE '%'
                                                                 || b.city
                                                                 || '%' )
              )
          WHERE
                  address_rank = 1
              AND university_rank = 1
      )
uno ON ( uni.university_id = uno.university_id )
WHEN MATCHED THEN UPDATE
SET uni.address_id = uno.address_id;

-- next, do the ones with a state --
COMMIT;

SELECT
    COUNT(*),
    address_id
FROM
    university
WHERE
    address_id IS NOT NULL
GROUP BY
    address_id
HAVING
    COUNT(*) > 1;
rollback;
MERGE INTO university uni
USING (
          SELECT
              university_id university_id,
              b_address_id address_id,
              uni_address_id
          FROM
              (
                  SELECT
                      u.university_id,
                      u.university_name,
                      u.year_founded,
                      u.address_id uni_address_id,
                      b.city,
                      s.abbreviation,
                      b.address_id b_address_id,
                      b.addr1,
                      RANK()
                      OVER(PARTITION BY u.university_id
                           ORDER BY b.address_id
                      )  address_rank,
                      RANK()
                      OVER(PARTITION BY b.address_id
                           ORDER BY u.university_id
                      )  university_rank
                  FROM
                           (
                          SELECT
                              *
                          FROM
                              university
                          WHERE
                              university.address_id IS NULL
                      ) u
                      JOIN x_states  s ON ( u.university_name LIKE '%'
                                                                  || s.state
                                                                  || '%'
                                           --AND university_id < 3910 
                                           )
                      JOIN ( -- all of the city/state combinations
                                                                                                                                                                                                        SELECT
                              a.address_id,
                              a.addr1    addr1,
                              state      abbreviation,
                              city
                          FROM
                              address a
                              LEFT OUTER JOIN university ON ( university.address_id = a.address_id )
                          WHERE
                              university.university_id IS NULL
                      )         b ON ( s.abbreviation = b.abbreviation)
              )
          WHERE
                  address_rank = 1
              AND university_rank = 1

      )
uno ON ( uni.university_id = uno.university_id )
WHEN MATCHED THEN UPDATE
SET uni.address_id = uno.address_id;

-- do the rest -- 
MERGE INTO university unii
USING (
          SELECT
              uni.university_id,
              uni.university_name,
              addr.address_id
          FROM
                   (
                  SELECT
                      ROWNUM numm,
                      university_id,
                      university_name,
                      address_id
                  FROM
                      x_uni_sans_address
              ) uni
              JOIN (
                  SELECT
                      ROWNUM numm,
                      address_id,
                      addr1
                  FROM
                      x_address_unassigned
              ) addr ON ( uni.numm = addr.numm )
      )
uno ON ( unii.university_id = uno.university_id )
WHEN MATCHED THEN UPDATE
SET unii.address_id = uno.address_id;



ALTER SESSION SET container = xepdb1;

CREATE VIEW x_uni_sans_address AS
    SELECT
        *
    FROM
        university
    WHERE
        address_id IS NULL;

drop view x_address_unassigned;
CREATE VIEW x_address_unassigned AS
    SELECT
        a.*
    FROM
        address     a
        LEFT OUTER JOIN university  u ON ( a.address_id = u.address_id )
    WHERE
        u.address_id IS NULL;
        
        select * from x_address_unassigned;
        commit;

-----------------------------


